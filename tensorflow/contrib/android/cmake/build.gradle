apply plugin: 'com.android.library'

// TensorFlow repo root dir on local machine
def TF_SRC_DIR = projectDir.toString() + "/../../../.."

def bazel_bin = "/usr/bin/bazel"

def bazel_output_file = getProjectDir().toString() + '/../../../../bazel-bin/tensorflow/contrib/android/tensorflow/libtensorflow_inference.so'
def tf_libs_dir = getProjectDir().toString() + '/../distribution/'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    // for debugging native code purpose
    publishNonDefault false

    defaultConfig {
        archivesBaseName = "Tensorflow-Android-Inference"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters  'armeabi-v7a', 'arm64-v8a'
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=gcc',
                          '-DANDROID_STL=gnustl_static'
            }
        }
    }
    sourceSets {
        main {
            java {
                srcDir "${TF_SRC_DIR}/tensorflow/contrib/android/java"
                srcDir "${TF_SRC_DIR}/tensorflow/java/src/main/java"
                exclude '**/examples/**'
            }

            jniLibs.srcDirs = ['../distribution/']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                          'proguard-rules.pro'
        }
    }
}

// Build libtensorflow-core.a if necessary
// Note: the environment needs to be set up already
//    [ such as installing autoconfig, make, etc ]
// How to use:
//    1) install all of the necessary tools to build libtensorflow-core.a
//    2) inside Android Studio IDE, uncomment buildTensorFlow in
//       whenTaskAdded{...}
//    3) re-sync and re-build. It could take a long time if NOT building
//       with multiple processes.
import org.apache.tools.ant.taskdefs.condition.Os

def propFile = project.rootProject.file('local.properties')
def ndkDir = ""

if(propFile.exists()) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties')
            .newDataInputStream())
    ndkDir = properties.getProperty('ndk.dir')
}
if (ndkDir == null || ndkDir == "") {
    ndkDir = System.getenv('ANDROID_NDK_HOME')
}

if(! Os.isFamily(Os.FAMILY_WINDOWS)) {
    // This script is for non-Windows OS. For Windows OS, MANUALLY build
    // (or copy the built) libs/headers to the
    //    ${TENSORFLOW_ROOT_DIR}/tensorflow/contrib/makefile/gen
    // refer to CMakeLists.txt about lib and header directories for details
    task buildTensorFlowArm64WithBazel(type: Exec) {
        group 'buildTensorflowLib'
        workingDir getProjectDir().toString() + '/../../../../'
        environment PATH: '/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin' +
                System.getenv('PATH')
        commandLine bazel_bin, 'build', '-c', 'opt',  \
            '//tensorflow/contrib/android:libtensorflow_inference.so',  \
            '--crosstool_top=//external:android/crosstool',  \
            '--cpu=arm64-v8a',
                '--android_cpu=arm64-v8a',  \
            '--host_crosstool_top=@bazel_tools//tools/cpp:toolchain', \
            '--verbose_failures'
    }

    task buildTensorFlowArmV7WithBazel(type: Exec) {
        group 'buildTensorflowLib'
        workingDir getProjectDir().toString() + '/../../../../'
        environment PATH: '/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/local/bin:' +
                System.getenv('PATH')
        commandLine bazel_bin, 'build', '-c', 'opt',  \
            '//tensorflow/contrib/android:libtensorflow_inference.so',  \
            '--crosstool_top=//external:android/crosstool',  \
            '--cpu=armeabi-v7a',
                '--android_cpu=armeabi-v7a',  \
            '--host_crosstool_top=@bazel_tools//tools/cpp:toolchain', \
            '--verbose_failures'
    }

    task buildTensorFlowX86WithBazel(type: Exec) {
        group 'buildTensorflowLib'
        workingDir getProjectDir().toString() + '/../../../../'
        environment PATH: '/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/local/bin:' +
                System.getenv('PATH')
        commandLine bazel_bin, 'build', '-c', 'opt',  \
            '//tensorflow/contrib/android:libtensorflow_inference.so',  \
            '--crosstool_top=//external:android/crosstool',  \
            '--cpu=x86',  \
            '--host_crosstool_top=@bazel_tools//tools/cpp:toolchain'
    }

    task cleanBazel(type: Exec) {
        group 'buildTensorflowLib'
        workingDir getProjectDir().toString() + '/../../../../'
        environment PATH: '/opt/local/bin:/opt/local/sbin:/usr/local/bin:/usr/local/bin:' +
                System.getenv('PATH')
        commandLine bazel_bin, "clean"
    }

    task copyARMNativeLibs(type: Copy) {
        group 'buildTensorflowLib'
        from bazel_output_file
        into tf_libs_dir + 'armeabi-v7a'
        duplicatesStrategy = 'include'
    }

    task copyX86NativeLibs(type: Copy) {
        group 'buildTensorflowLib'
        from bazel_output_file
        into tf_libs_dir + 'x86'
        duplicatesStrategy = 'include'
    }

    task copyARM64NativeLibs(type: Copy) {
        group 'buildTensorflowLib'
        from bazel_output_file
        into tf_libs_dir + 'arm64-v8a'
        duplicatesStrategy = 'include'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
